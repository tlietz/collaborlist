defmodule GoogleCertsTest do
  use ExUnit.Case, async: true

  describe "key cache" do
    @key_cache :foo

    test "maybe_create_key_cache/1 creates a cache when one doesn't exist" do
      assert GoogleCerts.maybe_create_key_cache(@key_cache) == :foo
    end

    test "maybe_create_key_cache/1 does not do anything when a key cache already exists" do
      GoogleCerts.maybe_create_key_cache(@key_cache)
      assert GoogleCerts.maybe_create_key_cache(@key_cache) == []
    end

    test "jwk_from_ets/2 works as expected" do
      sample_ets_lookup = [
        {"jwks",
         %{
           "b1a8259eb07660ef23781c85b7849bfa0a1c806c" => %JOSE.JWK{
             fields: %{},
             keys: :undefined,
             kty:
               {:jose_jwk_kty_rsa,
                {:RSAPublicKey,
                 25_443_445_131_005_887_349_079_870_099_345_462_942_197_254_525_224_813_836_357_390_818_802_733_994_939_422_391_117_889_488_426_048_064_214_464_807_202_678_057_814_506_857_598_216_519_713_500_367_054_751_798_085_721_175_479_253_718_721_128_486_079_664_202_366_173_291_604_729_149_002_231_216_365_881_810_559_170_806_779_025_870_730_014_084_702_667_165_448_007_235_200_987_855_525_273_872_722_215_577_190_207_735_445_331_571_211_390_355_838_289_869_579_550_719_903_997_372_837_189_990_257_205_625_911_327_200_960_755_961_994_062_392_857_814_623_927_220_777_221_801_084_795_932_729_073_692_044_686_769_833_905_352_721_957_914_989_988_356_488_139_696_938_688_580_054_858_491_441_425_957_305_503_349_608_380_717_737_047_724_774_228_463_593_205_537_518_100_423_351_999_443_851_498_455_439_855_233_622_545_947_953_242_965_160_199,
                 65537}}
           },
           "fcbd7f481a825d113e0d03dd94e60b69ff1665a2" => %JOSE.JWK{
             fields: %{},
             keys: :undefined,
             kty:
               {:jose_jwk_kty_rsa,
                {:RSAPublicKey,
                 20_607_799_286_815_146_346_272_668_957_764_259_713_609_522_835_284_084_414_263_366_121_293_312_450_630_380_229_613_310_193_301_498_051_252_378_522_246_226_676_648_265_089_290_399_678_929_787_883_796_114_269_101_050_988_064_877_055_583_474_452_395_487_137_975_960_148_794_655_466_190_540_959_601_168_013_190_075_672_302_186_992_186_644_667_213_300_395_315_982_297_191_556_573_839_399_323_171_929_230_034_233_552_329_926_110_604_103_229_026_703_629_208_478_118_611_161_180_909_316_136_553_658_156_277_681_295_466_757_962_316_591_325_061_933_874_129_933_603_707_401_592_250_873_384_044_665_326_478_104_397_695_347_476_506_070_514_388_372_695_740_797_007_652_083_761_332_388_386_922_039_548_603_285_961_334_198_439_167_810_663_616_826_529_750_962_414_137_538_761_830_927_148_610_959_967_340_059_365_762_695_060_857_354_124_641,
                 65537}}
           }
         }}
      ]

      key_id = "fcbd7f481a825d113e0d03dd94e60b69ff1665a2"

      assert sample_ets_lookup |> GoogleCerts.jwk_from_ets(key_id) == %JOSE.JWK{
               fields: %{},
               keys: :undefined,
               kty:
                 {:jose_jwk_kty_rsa,
                  {:RSAPublicKey,
                   20_607_799_286_815_146_346_272_668_957_764_259_713_609_522_835_284_084_414_263_366_121_293_312_450_630_380_229_613_310_193_301_498_051_252_378_522_246_226_676_648_265_089_290_399_678_929_787_883_796_114_269_101_050_988_064_877_055_583_474_452_395_487_137_975_960_148_794_655_466_190_540_959_601_168_013_190_075_672_302_186_992_186_644_667_213_300_395_315_982_297_191_556_573_839_399_323_171_929_230_034_233_552_329_926_110_604_103_229_026_703_629_208_478_118_611_161_180_909_316_136_553_658_156_277_681_295_466_757_962_316_591_325_061_933_874_129_933_603_707_401_592_250_873_384_044_665_326_478_104_397_695_347_476_506_070_514_388_372_695_740_797_007_652_083_761_332_388_386_922_039_548_603_285_961_334_198_439_167_810_663_616_826_529_750_962_414_137_538_761_830_927_148_610_959_967_340_059_365_762_695_060_857_354_124_641,
                   65537}}
             }
    end
  end
end
